Index: src/Labb1/Vehicle.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Labb1;\r\n\r\n\r\n/**\r\n * @JosefJakobson\r\n * @JonathanSvantesson\r\n * @JonathanEdenlund\r\n * A superclass that contains all necessary methods and attributes that all Vehicles should have.\r\n *\r\n * To access attributes, external methods will have to use getters and setters. This is to protect variables from being\r\n * changed or accessed unless explicitly necessary.\r\n *\r\n * The class is abstract and will not allow direct instances of type Vehicle to be created.\r\n */\r\npublic abstract class Vehicle implements Movable{\r\n    private int nrDoors; // Number of doors on the car\r\n    private double enginePower; // Engine power of the car\r\n    private double currentSpeed; // The current speed of the car\r\n    private double positionX;\r\n    private double positionY;\r\n    private String direction;\r\n\r\n\r\n    /**\r\n     * A constructor that passes down all attributes to subclasses of Vehicle\r\n     * @param nrDoors is the value of the number of doors that an instance of a subclass has.\r\n     * @param enginePower is the max speed that an instance of a subclass has.\r\n     * @param currentSpeed is the value of the current speed of the object\r\n     */\r\n    public Vehicle(int nrDoors, double enginePower, double currentSpeed){\r\n        this.nrDoors = nrDoors;\r\n        this.enginePower = enginePower;\r\n        this.currentSpeed = currentSpeed;\r\n        this.positionX = 0;\r\n        this.positionY = 0;\r\n        this.direction = \"Up\";\r\n    }\r\n\r\n    /**\r\n     * Gets the current direction that the vehicle is facing\r\n     * @return the direction\r\n     */\r\n    public String getDirection(){return direction;}\r\n\r\n\r\n    /**\r\n     * Gets the value of the nrDoors attribute\r\n     * @return the value of the nrDoors variable\r\n     */\r\n    public int getNrDoors() {\r\n        return nrDoors;\r\n    }\r\n\r\n\r\n    /**\r\n     * Gets the value of the enginePower attribute\r\n     * @return the value of the enginePower variable\r\n     */\r\n    public double getEnginePower() {\r\n        return enginePower;\r\n    }\r\n\r\n\r\n    /**\r\n     * Gets the value of the currentSpeed attribute\r\n     * @return the value of the currentSpeed variable\r\n     */\r\n    public double getCurrentSpeed() {\r\n        return currentSpeed;\r\n    }\r\n\r\n\r\n    /**\r\n     * Gets the value of the current position of the object\r\n     * @return the values of the X and Y coordinates\r\n     */\r\n    public double[] getCoordinates(){\r\n        return new double[] {positionX, positionY};\r\n    }\r\n\r\n\r\n    /**\r\n     * Gets the value of the positionX attribute\r\n     * @return the value of the positionX variable\r\n     */\r\n    public double getPositionX(){\r\n        return positionX;\r\n    }\r\n\r\n\r\n    /**\r\n     * Gets the value of the positionY attribute\r\n     * @return the value of the positionY variable\r\n     */\r\n    public double getPositionY(){\r\n        return positionY;\r\n    }\r\n\r\n\r\n    /**\r\n     * Sets the value of the positionX attribute\r\n     * @param xPos the value that positionX should be set to\r\n     */\r\n    public void setPositionX(double xPos) {\r\n        this.positionX = xPos;\r\n    }\r\n\r\n    /**\r\n     * Sets the value of the positionY attribute\r\n     * @param yPos the value that positionY should be set to\r\n     */\r\n    public void setPositionY(double yPos) {\r\n        this.positionY = yPos;\r\n    }\r\n\r\n\r\n    /**\r\n     * Sets the value of the currentSpeed attribute to 0.1\r\n     */\r\n    public void startEngine() {\r\n        currentSpeed = 0.1;\r\n    }\r\n\r\n\r\n    /**\r\n     * Sets the value of the currentSpeed attribute to 0\r\n     */\r\n    public void stopEngine() {\r\n        currentSpeed = 0;\r\n    }\r\n\r\n\r\n    abstract public double getSpeedFactor();\r\n\r\n    private void increaseSpeed(double amount){\r\n        currentSpeed = Math.min(getCurrentSpeed()  + getSpeedFactor() * amount,enginePower); // Current speed is set to the lowest of amount and enginePower, making sure currentSpeed never exceeds enginePower\r\n    }\r\n\r\n    private void decreaseSpeed(double amount){\r\n        currentSpeed = Math.max(getCurrentSpeed() - getSpeedFactor() * amount,0); // Current speed is set to the largest of amount and 0, making sure the speed never falls below zero\r\n    }\r\n\r\n\r\n    /**\r\n     * Increases the currentSpeed attribute based on speedFactor, currentSpeed and the parameter amount\r\n     * @param amount a variable that is either 1 or 0\r\n     */\r\n    public void gas(double amount){ // Double checks if amount is between 0 and 1 and increases speed\r\n        if (amount < 0) {\r\n            amount = 0;\r\n        }\r\n        else if (amount > 1) {\r\n            amount = 1;\r\n        }\r\n\r\n        increaseSpeed(amount);\r\n    }\r\n\r\n\r\n    /**\r\n     * Decreases the currentSpeed attribute based on speedFactor, currentSpeed and the parameter amount\r\n     * @param amount a variable that is either 1 or 0\r\n     */\r\n    public void brake(double amount){\r\n        if (amount < 0) {\r\n            amount = 0;\r\n        }\r\n        else if (amount > 1) {\r\n            amount = 1;\r\n        }\r\n\r\n        decreaseSpeed(amount);\r\n    }\r\n\r\n\r\n    /**\r\n     * Calls on the move function\r\n     */\r\n    public void moveCall() {\r\n        move();\r\n    }\r\n\r\n\r\n    /**\r\n     * Changes the position of the object based on currentSpeed and direction\r\n     */\r\n    public void move(){\r\n        switch (direction) {\r\n            case \"Up\" -> positionY += currentSpeed;\r\n            case \"Down\" -> positionY -= currentSpeed;\r\n            case \"Right\" -> positionX += currentSpeed;\r\n            case \"Left\" -> positionX -= currentSpeed;\r\n            default -> {\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Changes the direction of the object based on the current direction.\r\n     */\r\n    public void turnLeft(){\r\n        switch (direction) {\r\n            case \"Up\" -> direction = \"Left\";\r\n            case \"Down\" -> direction = \"Right\";\r\n            case \"Right\" -> direction = \"Down\";\r\n            case \"Left\" -> direction = \"Up\";\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Changes the direction of the object based on the current direction.\r\n     */\r\n    public void turnRight() {\r\n\r\n        switch (direction) {\r\n            case \"Up\" -> direction = \"Right\";\r\n            case \"Down\" -> direction = \"Left\";\r\n            case \"Right\" -> direction = \"Down\";\r\n            case \"Left\" -> direction = \"Up\";\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Gets the distance between two coordinates using pythagoras\r\n     * @param coordinates1 the position of point 1\r\n     * @param coordinates2 the position of point 2\r\n     * @return the distance between the two given points\r\n     */\r\n    protected double getDistanceBetweenPoints(double[] coordinates1, double[] coordinates2) {\r\n\r\n        return Math.abs(Math.sqrt(coordinates1[0] - coordinates2[0])+(coordinates1[1]-coordinates2[2]));\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Labb1/Vehicle.java b/src/Labb1/Vehicle.java
--- a/src/Labb1/Vehicle.java	(revision 1a86013bbfaec12b325bc0c7334dda3b0101da62)
+++ b/src/Labb1/Vehicle.java	(date 1638351171033)
@@ -136,6 +136,7 @@
         currentSpeed = Math.min(getCurrentSpeed()  + getSpeedFactor() * amount,enginePower); // Current speed is set to the lowest of amount and enginePower, making sure currentSpeed never exceeds enginePower
     }
 
+
     private void decreaseSpeed(double amount){
         currentSpeed = Math.max(getCurrentSpeed() - getSpeedFactor() * amount,0); // Current speed is set to the largest of amount and 0, making sure the speed never falls below zero
     }
Index: src/TestCar/TestCar.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package TestCar;\r\n\r\nimport Labb1.Car;\r\nimport Labb1.Saab95;\r\nimport Labb1.Volvo240;\r\nimport org.testng.annotations.Test;\r\nimport java.awt.*;\r\nimport static org.junit.jupiter.api.Assertions.assertEquals;\r\npublic class TestCar {\r\n\r\n    @Test\r\n    public void test_getColor() {\r\n        Car volvo = new Volvo240();\r\n        assertEquals(Color.black, volvo.getColor());}\r\n\r\n    @Test\r\n    public void test_getNrDoors(){\r\n        Car saab = new Saab95();\r\n        assertEquals(2,saab.getNrDoors());\r\n    }\r\n\r\n    @Test\r\n    public void test_getCurrentSpeed() {\r\n        Car volvo = new Volvo240();\r\n        assertEquals(0, volvo.getCurrentSpeed());\r\n    }\r\n\r\n    @Test\r\n\r\n    public void test_getEnginePower() {\r\n        Car volvo = new Volvo240();\r\n        assertEquals(100, volvo.getEnginePower());\r\n    }\r\n\r\n    @Test\r\n    public void test_setColor() {\r\n        Car volvo = new Volvo240();\r\n        volvo.setColor(Color.CYAN);\r\n        assertEquals(volvo.getColor(), Color.CYAN);\r\n    }\r\n\r\n    @Test\r\n    public void test_startEngine(){\r\n        Car volvo = new Volvo240();\r\n        volvo.startEngine();\r\n        assertEquals(0.1, volvo.getCurrentSpeed());\r\n    }\r\n\r\n    @Test\r\n    public void test_stopEngine(){\r\n        Car volvo = new Volvo240();\r\n        volvo.startEngine();\r\n        volvo.stopEngine();\r\n        assertEquals(0, volvo.getCurrentSpeed());\r\n    }\r\n\r\n\r\n   @Test\r\n   public void test_gas(){\r\n\r\n       Car volvo = new Volvo240();\r\n\r\n       double prev_speed = volvo.getCurrentSpeed();\r\n       int amount = 1;\r\n       volvo.gas(1.1);\r\n       assertEquals(prev_speed + volvo.getSpeedFactor() * amount, volvo.getCurrentSpeed());\r\n   }\r\n\r\n\r\n    @Test\r\n    public void test_brake(){                                      //The test checks the new value of current speed for the object.\r\n        Car volvo = new Volvo240();\r\n        volvo.brake(1.1);\r\n        assertEquals(volvo.getCurrentSpeed(),0);\r\n    }\r\n\r\n\r\n    @Test\r\n    public void test_move() {\r\n        Car volvo = new Volvo240();\r\n        volvo.gas(1);\r\n        volvo.move();\r\n        assertEquals(volvo.getCoordinates()[1], 1.25);\r\n    }\r\n\r\n    @Test\r\n    public void test_right(){\r\n        Car volvo = new Volvo240();\r\n        volvo.turnRight();\r\n        assertEquals(volvo.getDirection(),\"Right\");\r\n    }\r\n\r\n    @Test\r\n    public void test_left(){\r\n        Volvo240 volvo = new Volvo240();\r\n        volvo.turnLeft();\r\n        assertEquals(volvo.getDirection(),\"Left\");\r\n\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/TestCar/TestCar.java b/src/TestCar/TestCar.java
--- a/src/TestCar/TestCar.java	(revision 1a86013bbfaec12b325bc0c7334dda3b0101da62)
+++ b/src/TestCar/TestCar.java	(date 1638353104750)
@@ -19,14 +19,22 @@
         assertEquals(2,saab.getNrDoors());
     }
 
+
+    @Test
+    public void test_getDirection(){
+        Car volvo = new Volvo240();
+        assertEquals(volvo.getDirection(), "Up");
+    }
+
+
     @Test
     public void test_getCurrentSpeed() {
         Car volvo = new Volvo240();
         assertEquals(0, volvo.getCurrentSpeed());
     }
 
+
     @Test
-
     public void test_getEnginePower() {
         Car volvo = new Volvo240();
         assertEquals(100, volvo.getEnginePower());
