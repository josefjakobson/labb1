Index: src/Labb1/Vehicle.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Labb1;\r\n\r\npublic abstract class Vehicle implements Movable{\r\n    private int nrDoors; // Number of doors on the car\r\n    private double enginePower; // Engine power of the car\r\n    private double currentSpeed; // The current speed of the car\r\n    private double positionX;\r\n    private double positionY;\r\n    private String direction;\r\n\r\n    public Vehicle(int nrDoors, double enginePower, double currentSpeed){\r\n        this.nrDoors = nrDoors;\r\n        this.enginePower = enginePower;\r\n        this.currentSpeed = currentSpeed;\r\n        this.positionX = 0;\r\n        this.positionY = 0;\r\n        this.direction = \"Up\";\r\n    }\r\n\r\n    public String getDirection(){return direction;}\r\n\r\n    public int getNrDoors() {\r\n        return nrDoors;\r\n    }\r\n\r\n    public double getEnginePower() {\r\n        return enginePower;\r\n    }\r\n\r\n    public double getCurrentSpeed() {\r\n        return currentSpeed;\r\n    }\r\n\r\n    public double[] getCoordinates(){\r\n        return new double[] {positionX, positionY};\r\n    }\r\n\r\n    public double getPositionX(){\r\n        return positionX;\r\n    }\r\n\r\n    public double getPositionY(){\r\n        return positionY;\r\n    }\r\n\r\n    public void setPositionX(double xPos) {\r\n        this.positionX = xPos;\r\n    }\r\n\r\n    public void setPositionY(double yPos) {\r\n        this.positionY = yPos;\r\n    }\r\n\r\n    public void startEngine() {\r\n        currentSpeed = 0.1;\r\n    }\r\n\r\n    public void stopEngine() {\r\n        currentSpeed = 0;\r\n    }\r\n\r\n    abstract public double getSpeedFactor();\r\n\r\n    private void increaseSpeed(double amount){\r\n        currentSpeed = Math.min(getCurrentSpeed()  + getSpeedFactor() * amount,enginePower); // Current speed is set to the lowest of amount and enginePower, making sure currentSpeed never exceeds enginePower\r\n    }\r\n\r\n    private void decreaseSpeed(double amount){\r\n        currentSpeed = Math.max(getCurrentSpeed() - getSpeedFactor() * amount,0); // Current speed is set to the largest of amount and 0, making sure the speed never falls below zero\r\n    }\r\n\r\n    public void gas(double amount){ // Double checks if amount is between 0 and 1 and increases speed\r\n        if (amount < 0) {\r\n            amount = 0;\r\n        }\r\n        else if (amount > 1) {\r\n            amount = 1;\r\n        }\r\n\r\n        increaseSpeed(amount);\r\n    }\r\n\r\n    public void brake(double amount){\r\n        if (amount < 0) {\r\n            amount = 0;\r\n        }\r\n        else if (amount > 1) {\r\n            amount = 1;\r\n        }\r\n\r\n        decreaseSpeed(amount);\r\n    }\r\n\r\n    public void moveCall() {\r\n        move();\r\n    }\r\n\r\n    public void move(){\r\n        switch (direction) {\r\n            case \"Up\" -> positionY += currentSpeed;\r\n            case \"Down\" -> positionY -= currentSpeed;\r\n            case \"Right\" -> positionX += currentSpeed;\r\n            case \"Left\" -> positionX -= currentSpeed;\r\n            default -> {\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    public void turnLeft(){\r\n        switch (direction) {\r\n            case \"Up\" -> direction = \"Left\";\r\n            case \"Down\" -> direction = \"Right\";\r\n            case \"Right\" -> direction = \"Down\";\r\n            case \"Left\" -> direction = \"Up\";\r\n        }\r\n    }\r\n\r\n\r\n    public void turnRight() {\r\n\r\n        switch (direction) {\r\n            case \"Up\" -> direction = \"Right\";\r\n            case \"Down\" -> direction = \"Left\";\r\n            case \"Right\" -> direction = \"Down\";\r\n            case \"Left\" -> direction = \"Up\";\r\n        }\r\n    }\r\n\r\n    protected double getDistanceBetweenPoints(double[] coordinates1, double[] coordinates2) {\r\n\r\n        return Math.abs(Math.sqrt(coordinates1[0] - coordinates2[0])+(coordinates1[1]-coordinates2[2]));\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Labb1/Vehicle.java b/src/Labb1/Vehicle.java
--- a/src/Labb1/Vehicle.java	(revision eb05ad38cb1b5768fddbcf84ccc56c9a95ff1cd0)
+++ b/src/Labb1/Vehicle.java	(date 1638284755396)
@@ -1,4 +1,15 @@
 package Labb1;
+/**
+ * @JosefJakobson
+ * @JonathanSvantesson
+ * @JonathanEdenlund
+ * A superclass that contains all necessary methods and attributes that all vehicles should have.
+ *
+ * To access attributes, external methods will have to use getters and setters. This is to protect variables from being
+ * changed or accessed unless explicitly necessary.
+ *
+ * The class is abstract and will not allow direct instances of type Vehicle to be created.
+ */
 
 public abstract class Vehicle implements Movable{
     private int nrDoors; // Number of doors on the car
@@ -8,6 +19,12 @@
     private double positionY;
     private String direction;
 
+    /**
+     * Contains all attributes that are to be passed down to subclasses.
+     * @param nrDoors is the value of the number of doors that an instance of a subclass has.
+     * @param enginePower is the max speed that an instance of a subclass has.
+     * @param currentSpeed is the value of the current speed of the object
+     */
     public Vehicle(int nrDoors, double enginePower, double currentSpeed){
         this.nrDoors = nrDoors;
         this.enginePower = enginePower;
@@ -17,50 +34,109 @@
         this.direction = "Up";
     }
 
+
+    /**
+     * Gets the value of the direction variable.
+     * @return value of the direction variable
+     */
     public String getDirection(){return direction;}
 
+
+    /**
+     * Gets the value of the nrDoors variable.
+     * @return value of the nrDoors variable
+     */
     public int getNrDoors() {
         return nrDoors;
     }
 
+
+    /**
+     * Gets the value of the enginePower variable.
+     * @return value of the enginePower variable
+     */
     public double getEnginePower() {
         return enginePower;
     }
 
+
+    /**
+     * Gets the value of the currentSpeed variable.
+     * @return value of the currentSpeed variable
+     */
     public double getCurrentSpeed() {
         return currentSpeed;
     }
 
+
+    /**
+     * Gets the values of position x and y.
+     * @return a list of doubles for respective positions
+     */
     public double[] getCoordinates(){
         return new double[] {positionX, positionY};
     }
 
+
+    /**
+     * Gets the value of the positionX variable.
+     * @return value of the positionX variable
+     */
     public double getPositionX(){
         return positionX;
     }
 
+
+    /**
+     * Gets the value of the positionY variable.
+     * @return value of the positionY variable
+     */
     public double getPositionY(){
         return positionY;
     }
 
+
+    /**
+     * Sets the value of the positionX variable.
+     * @param xPos a value to set this.positionX to.
+     */
     public void setPositionX(double xPos) {
         this.positionX = xPos;
     }
 
+
+    /**
+     * Sets the value of the positionY variable.
+     * @param yPos a value to set this.positionX to.
+     */
     public void setPositionY(double yPos) {
         this.positionY = yPos;
     }
 
+
+    /**
+     * Sets the value of the currentSpeed variable to 0.1.
+     */
     public void startEngine() {
         currentSpeed = 0.1;
     }
 
+
+    /**
+     * Sets the value of the currentSpeed variable to 0.
+     */
     public void stopEngine() {
         currentSpeed = 0;
     }
 
+
+    /**
+     * gets the value of the variable speedFactor.
+     */
     abstract public double getSpeedFactor();
 
+
+
     private void increaseSpeed(double amount){
         currentSpeed = Math.min(getCurrentSpeed()  + getSpeedFactor() * amount,enginePower); // Current speed is set to the lowest of amount and enginePower, making sure currentSpeed never exceeds enginePower
     }
